## Reverse proxy and routing requests, load balancing 
## Server reverse proxy forwarding clients information
## Server load balancer configured with passive health checker(should be tested)
## 
## All non public requests making a subrequest for authorization
## For manually built docker, put container's Host/IP in services upstream
## This file currently refer to other containers names through docker-compose network
##	
##
##
##
## (TODO) default security headers to the responses
## (TODO) define cache directives


worker_processes 1;							# number of nginx workers, set this to 'auto' to enable one worker per cpu core(run 'lscpu' to see the available number of cpus)

events {
	worker_connections 100;					# maximum connections number per worker(run 'ulimit -n' to get the maximum number of connections possible in the machine)
}

http {
    
	##
	# Basic Settings
	##
	include nginx-basic.conf;

	##
	# Cache Settings
	##
	include nginx-cache.conf;
	
	##
	# Security Settings
	##
	include nginx-security.conf;
    
    ##
	# SSL Settings
	##
	include nginx-ssl.conf;

	##
	# Log Settings
	##
	include nginx-log.conf;
	
	##
	# Gzip Settings
	##
	include nginx-gzip.conf;

	##
	# Virtual Host Configs
	##
	#include /etc/nginx/conf.d/*.conf;		# this configuration will lead to 404 responses always
	include /etc/nginx/sites-enabled/*;
    


	#####	-----	#####



    ## Servers upstreams for load balancing
	upstream base-js-upstream {    
		## Defining the balancing method    
		least_conn;
		
		## Define the balanced servers upstream(automatically balancing between replicas)
		## Configuring them to have the same weight on balancing
		## Waiting 3 fails within 15 seconds to mark them as unhealthy
		## Allowing 30 seconds of slow start after recovering
		server base-js:8080 weight=1 max_fails=3 fail_timeout=15s; #slow_start=30s;
	}
	upstream base-ts-upstream {    
		least_conn;
		server base-ts:8080 weight=1 max_fails=3 fail_timeout=15s; #slow_start=30s;
	}
	upstream user-mongoose-upstream {      
		least_conn;
		server user-mongoose:8080 weight=1 max_fails=3 fail_timeout=15s; #slow_start=30s;
	}

	## Redirect all HTTP traffic(http://xxxx:8080/...) to HTTPS
	server {
		server_name express-template;
		listen 80;
		set $https_port '8443';															# docker-compose(host) port for listening https
		return 308 https://$host:$https_port$request_uri;
	}

	## HTTPS Server
    server {
        server_name express-template;				
		listen 443 ssl http2;
		

        
        ## Forwarding client's and request's information in all routes
        proxy_set_header 			Host $host;
        proxy_set_header 			X-Real-IP $remote_addr;	
        proxy_set_header 			X-Forwarded-Proto $scheme; 			
        proxy_set_header 			X-Forwarded-For $proxy_add_x_forwarded_for;  



		## Authorization subrequest for non public requests
		location = /auth {
			internal;			
			proxy_method 			GET;			
			proxy_pass              http://user-mongoose-upstream/authorization;		# Using user-mongoose template as external auth
			proxy_pass_request_body off;
			proxy_set_header        Content-Length "";
			proxy_set_header        X-Original-URI $request_uri;			
		}
		
		## Routing requests
		location /base-js {			
			location ~ ^((?!\/public\/).)*$ {								# All requests that doesn't contain 'public' keyword in the uri requires auth
				auth_request 			/auth;								# Call for subrequest auth
				auth_request_set 		$auth_status $upstream_status;
				rewrite 				^/base-js/(.*) /$1  break;
				proxy_pass 				http://base-js-upstream;
			}
			rewrite 					^/base-js/(.*) /$1  break;			# Rewrite leaving only the useful url and remove the routing name
			proxy_pass 					http://base-js-upstream;			# Proxying the request to the upstream balancer(back-end as http)
		}
		location /base-ts {
			location ~ ^((?!\/public\/).)*$ {
				auth_request 			/auth; 
				auth_request_set 		$auth_status $upstream_status;
				rewrite 				^/base-ts/(.*) /$1  break;
				proxy_pass 				http://base-ts-upstream;
			}
			rewrite 					^/base-ts/(.*) /$1  break;
			proxy_pass 					http://base-ts-upstream;
		}
		location /user-mongoose {			
			location ~ ^((?!\/public\/).)*$ {
				auth_request 			/auth;
				auth_request_set 		$auth_status $upstream_status;				
				rewrite 				^/user-mongoose/(.*) /$1  break;
				proxy_pass 				http://user-mongoose-upstream;
			}
			rewrite 					^/user-mongoose/(.*) /$1 break;			
			proxy_pass 					http://user-mongoose-upstream;
		}
		


    }
}
