# Look for how to disable some unused and potencially insecure modules(like http_autoindex_module)

## Add default security headers
server_tokens off;                                                                  # remove nginx version from headers
add_header Strict-Transport-Security 'max-age=31536000';                            # tell the browser not to load http
add_header X-Frame-Options 'SAMEORIGIN';                                            # prevent loading content in a different origin(clickjacking)
add_header X-XSS-Protection '1; mode=block';                                        # prevent cross site scripting
add_header X-Content-Type-Options 'nosniff';                                        # prevents the browser from doing MIME-type sniffing which is used to override response Content-Type headers

## Enabling cors(must be improved and may be implemented in different locations in server)
add_header 'Access-Control-Allow-Origin' '*';                                       # replace it with the domains that are permitted to access the responses in the browser
add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
add_header 'Access-Control-Allow-Credentials' 'true';
add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';




## Applying rate limiting zones: limit_req_zone <rate_limit_key> zone=<zone_name>:<zone_size> rate=<requests_per_time> [burst=<req_number> [nodelay]];
#   - <rate_limit_key> could be applied by $server_name(server), $binary_remote_addr(user), $request_uri(req uri), ...
#   - <zone_size> may be adjusted
#   - rate is the average number of request to respond inside a timeframe
#   - [burst] specifies a number of requests to not reject directly when overlaping rate limit occurs, instead they will have to wait and will be handled respecting the rate limit
#   - nodelay allows [burst] to respond excessive requests immediatly

limit_req_zone $server_name zone=GENERAL:20m rate=5r/s;                             # useful to handle traffic spikes applied to server
limit_req zone=GENERAL burst=10 nodelay;
#limit_req_zone $request_uri zone=FRONTEND:10m rate=20r/s;                          # useful for front end, making excessive requests wait for rate limit reset
#limit_req zone=FRONTEND burst=10;
